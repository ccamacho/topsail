- name: Configure user application monitoring
  command:
    oc apply -f {{ user_applications_monitor_config }}

- name: Ensure user monitoring enabled
  shell:
    set -o pipefail;
    oc -n openshift-user-workload-monitoring get pod --no-headers
      | awk '{ print $3}'
  register: monitoring_enabled
  delay: 3
  retries: 20
  # until all of the pods are in the running state
  until: "'Completed' not in monitoring_enabled.stdout and 'Failed' not in monitoring_enabled.stdout and 'Pending' not in monitoring_enabled.stdout"

- name: Get monitoring secret name
  shell:
    set -o pipefail;
    oc get secret -n openshift-user-workload-monitoring
      | grep  prometheus-user-workload-token
      | head -n 1
      | awk '{print $1 }'
  register: monitoring_secret
  delay: 3
  retries: 20
  until: "'prometheus-user-workload-token' in monitoring_secret.stdout"

- name: Get Thanos Endpoint
  shell:
    set -o pipefail;
    oc get route thanos-querier -n openshift-monitoring -o json
      | jq -r '.spec.host'
  register: thanos_endpoint_cmd

- name: Format the Thanos Endpoint
  set_fact:
    thanos_endpoint: "https://{{ thanos_endpoint_cmd.stdout }}"

- name: Checking monitoring token size
  shell:
    set -o errexit;
    set -o pipefail;
    set -o nounset;
    set -o errtrace;

    oc get secret {{ monitoring_secret.stdout }} -n openshift-user-workload-monitoring -o json
      | jq -r '.data.token'
      | base64 -d
      | wc -c
  register: token_size
  delay: 2
  retries: 30
  until: token_size.stdout | int > 1000

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Define location of Trimaran config
  set_fact:
    trimaran_setup_config: "{{ artifact_extra_logs_dir }}/src/trimaran-templated-config.yaml"

- name: Configure Trimaran options
  template:
    src: "{{ trimaran_setup_template }}"
    dest: "{{ trimaran_setup_config }}"
    mode: '0644'

- name: Deploy Trimaran scheduler
  shell: |
    set -o errexit;
    set -o pipefail;
    set -o nounset;
    set -o errtrace;

    echo "Route to thanos monitoring endpoint: {{ thanos_endpoint }}"
    export MONITORING_TOKEN=$(oc get secret {{ monitoring_secret.stdout }} -n openshift-user-workload-monitoring -o json | jq -r '.data.token' | base64 -d)
    cat {{ trimaran_setup_config }} | envsubst | oc apply -f -
  register: deploy_trimaran

- name: Ensure Trimaran is Running
  shell:
    set -o pipefail;
    oc get pods -n trimaran
      | grep "trimaran-scheduler"
      | awk '{print $3}'
  register: trimaran_running
  delay: 3
  retries: 20
  until: trimaran_running.stdout == 'Running'

- name: Ensure a pod can be scheduled
  block:
  - name: Deploy test pod with Trimaran
    shell:
      oc apply -f {{ trimaran_test_pod }} -n trimaran

  - name: Ensure the Trimaran test pods completes
    shell:
      set -o pipefail;
      oc get pod trimaran-test -n trimaran --no-headers
        | awk '{print $3}'
    register: trimaran_test_pod_state
    delay: 5
    retries: 20
    until: trimaran_test_pod_state.stdout == 'Completed'

  always:
  - name: Dump trimaran info
    shell: |
      oc get pod trimaran-test -n trimaran -oyaml > "{{ artifact_extra_logs_dir }}/trimaran-test.pod.yaml"
      oc describe pod trimaran-test -n trimaran > "{{ artifact_extra_logs_dir }}/trimaran-test.pod.desc"
      oc get all -n trimaran -oyaml > "{{ artifact_extra_logs_dir }}/all-trimaran.yaml"

  - name: Dump trimaran scheduler log
    shell: |
      oc logs -n trimaran $(oc get pod -n trimaran -l "app=trimaran-scheduler" --no-headers | awk '{print $1}') > "{{ artifact_extra_logs_dir }}/trimaran_scheduler.log"
    ignore_errors: true

  - name: Dump cluster events
    shell:
      oc get ev -oyaml -n trimaran > "{{ artifact_extra_logs_dir }}/events.yaml"
