{% set scale_test_imagestream = "image-registry.openshift-image-registry.svc:5000/"+ load_aware.scale_test.namespace +"/coreutils" %}

{% set secrets_location = false | or_env(secrets.dir.env_key) %}
{% if not secrets_location %}
  {{ ("ERROR: secrets_location must be defined (secrets.dir.name="+ secrets.dir.name|string +" or env(secrets.dir.env_key=" + secrets.dir.env_key|string + ")) ") | raise_exception }}
{% endif %}
{% set s3_ldap_password_location = secrets_location + "/" + secrets.s3_ldap_password_file %}

# ---

__aliases:
  sutest_preload_image: &sutest_preload_image
    node_selector_key: {{ clusters.sutest.compute.machineset.taint.key }}
    node_selector_value: "{{ clusters.sutest.compute.machineset.taint.value }}"
    pod_toleration_effect: {{ clusters.sutest.compute.machineset.taint.effect }}
    pod_toleration_key: {{ clusters.sutest.compute.machineset.taint.key }}

cluster capture_environment/sample:
  _none: true # nothing to configure :/

load_aware deploy_trimaran:
  log_level: {{ load_aware.log_level }}
  plugin: {{ load_aware.plugin }}
  default_requests_cpu: {{ load_aware.args.TargetLoadPacking.default_requests_cpu }}
  default_target_requests_multiplier: {{ load_aware.args.TargetLoadPacking.default_target_requests_multiplier }}
  target_utilization: {{ load_aware.args.TargetLoadPacking.target_utilization }}
  safe_variance_margin: {{ load_aware.args.LoadVariationRiskBalancing.safe_variance_margin }}
  safe_variance_sensitivity: {{ load_aware.args.LoadVariationRiskBalancing.safe_variance_sensitivity }}
  smoothing_window_size: {{ load_aware.args.LowRiskOverCommitment.smoothing_window_size }}
  risk_limit_weights_cpu: {{ load_aware.args.LowRiskOverCommitment.risk_limit_weights.cpu }}
  risk_limit_weights_memory: {{ load_aware.args.LowRiskOverCommitment.risk_limit_weights.memory }}

load_aware scale_test:
  distribution: {{ load_aware.scale_test.distribution }}
  duration: {{ load_aware.scale_test.duration }}
  instances: {{ load_aware.scale_test.instances }}
  namespace: {{ load_aware.scale_test.namespace }}
  scheduler: {{ load_aware.scale_test.scheduler }}
  sleep_duration: {{ load_aware.scale_test.sleep_duration }}

cluster build_push_image/deps:
  namespace: {{ load_aware.scale_test.namespace }}
  image_local_name: coreutils
  tag: deps
  dockerfile_path: testing/load-aware/images/Containerfile.deps

cluster build_push_image/make:
  namespace: {{ load_aware.scale_test.namespace }}
  image_local_name: coreutils
  tag: make
  dockerfile_path: testing/load-aware/images/Containerfile.make

cluster preload_image/deps:
  namespace: {{ load_aware.scale_test.namespace }}
  name: deps
  image: {{ scale_test_imagestream }}:deps
  <<: *sutest_preload_image

cluster preload_image/make:
  namespace: {{ load_aware.scale_test.namespace }}
  name: make
  image: {{ scale_test_imagestream }}:make
  <<: *sutest_preload_image

cluster preload_image/sleep:
  namespace: {{ load_aware.scale_test.namespace }}
  name: sleep
  image: registry.access.redhat.com/ubi8/ubi
  <<: *sutest_preload_image

sutest/cluster set_project_annotation/node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}"
  project: {{ load_aware.scale_test.namespace }}

sutest/cluster set_project_annotation/toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{\"operator\": \"Exists\", \"effect\": \"{{ clusters.sutest.compute.machineset.taint.effect }}\", \"key\": \"{{ clusters.sutest.compute.machineset.taint.key }}\"}]'
  project: {{ load_aware.scale_test.namespace }}

kepler/cluster set_project_annotation/node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}"
  project: openshift-kepler-operator

kepler/cluster set_project_annotation/toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{\"operator\": \"Exists\", \"effect\": \"{{ clusters.sutest.compute.machineset.taint.effect }}\", \"key\": \"{{ clusters.sutest.compute.machineset.taint.key }}\"}]'
  project: openshift-kepler-operator

sutest/cluster set_scale:
  instance_type: {{ clusters.create.ocp.compute.type }}
  name: {{ clusters.sutest.compute.machineset.name }}
{% if clusters.sutest.compute.dedicated %}
  taint: {{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}:{{ clusters.sutest.compute.machineset.taint.effect }}
{% endif %}
  spot: {{ clusters.sutest.compute.machineset.spot }}
  scale: {{ clusters.sutest.compute.machineset.count }}
