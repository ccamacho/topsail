---
- name: Ensure that the secret properties file exists
  stat:
    path: "{{ notebooks_locust_scale_test_secret_properties_file }}"

- name: Ensure that the user count is set
  fail: msg="user count isn't set"
  when: notebooks_locust_scale_test_user_count | int < 0

- name: Ensure that the IDP name is set
  fail: msg="idp name isn't set"
  when: not notebooks_locust_scale_test_idp_name

- name: Ensure that the username prefix is set
  fail: msg="username prefix isn't set"
  when: not notebooks_locust_scale_test_username_prefix

- name: Set system-under-test == driver-cluster if no system-under-test (SUT) is provided
  set_fact:
    sut_cluster_kubeconfig: "{{ notebooks_locust_scale_test_sut_cluster_kubeconfig | default(lookup('env', 'KUBECONFIG'), true) }}"
    rhods_locust_scale_test_image: image-registry.openshift-image-registry.svc:5000/{{ notebooks_locust_scale_test_namespace }}/{{ notebooks_locust_scale_test_locust_istag }}
    rhods_artifacts_exporter_image: image-registry.openshift-image-registry.svc:5000/{{ notebooks_locust_scale_test_namespace }}/{{ notebooks_locust_scale_test_artifacts_exporter_istag }}
    rhods_notebook_namespace: rhods-notebooks
    tester_job_name: locust-notebook-scale-test
    tester_namespace: "{{ notebooks_locust_scale_test_namespace }}"
    test_artifacts_collected: all
    capture_prom_db: "{{ notebooks_locust_scale_test_capture_prom_db }}"
    notebooks_locust_scale_test_minio_namespace: "{{ notebooks_locust_scale_test_minio_namespace }}"
    notebooks_locust_scale_test_minio_bucket_name: "{{ notebooks_locust_scale_test_minio_bucket_name }}"

- name: Fetch RHODS endpoints from the SUT cluster
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  block:
  - name: Test the connectivity of the SUT cluster
    command: oc whoami --show-console

  - name: Get RHODS dashboard address (SUT cluster)
    command: oc get route/rhods-dashboard -n redhat-ods-applications -ojsonpath={.spec.host}
    register: rhods_dashboard_hostname_cmd

  - name: Get the RHODS version
    shell:
      oc get csv -n redhat-ods-operator -ojsonpath={.items[0].spec.version}
    register: rhods_version_cmd

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Instantiate the tester job template
  template:
    src: "{{ notebooks_locust_scale_test_job }}"
    dest: "{{ artifact_extra_logs_dir }}/src/000_notebooks_locust_scale_test.yaml"
    mode: '0400'

- name: Delete the RHODS test entrypoint, if it exists
  command:
    oc delete cm/rhods-notebook-locust-entrypoint
       -n {{ notebooks_locust_scale_test_namespace }}
       --ignore-not-found

- name: Create the RHODS test entrypoint
  command:
    oc create cm rhods-notebook-locust-entrypoint
       "--from-file={{ notebooks_locust_scale_test_entrypoint_directory }}"
       "--from-file=artifacts-exporter.sh={{ notebooks_locust_scale_test_s3_artifacts_exporter_sidecar }}"
       -n {{ notebooks_locust_scale_test_namespace }}

- name: Delete the credentials secret file, if it exists
  command:
    oc delete secret rhods-scale-test-credentials
           -n {{ notebooks_locust_scale_test_namespace }}
           --ignore-not-found

- name: Create the credentials secret file
  command:
    oc create secret generic rhods-scale-test-credentials
       "--from-file=secret.properties={{ notebooks_locust_scale_test_secret_properties_file }}"
       -n {{ notebooks_locust_scale_test_namespace }}

- name: Delete the RHODS tester job, if it exists
  command:
    oc delete
       -f "{{ artifact_extra_logs_dir }}/src/000_notebooks_locust_scale_test.yaml"
       --ignore-not-found
       -n {{ notebooks_locust_scale_test_namespace }}

- name: Delete the notebooks of the notebook namespace
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  shell:
    set -o pipefail;
    oc get notebooks -oname -n {{ rhods_notebook_namespace }} | \
      grep {{ notebooks_locust_scale_test_username_prefix }} | \
      xargs --no-run-if-empty
            oc delete -n {{ rhods_notebook_namespace }}
  failed_when: false

- name: Create a role for listing Pods
  shell:
    set -o pipefail;
    oc create role pod-reader
       --verb=get,list
       --resource=pods
       -n {{ notebooks_locust_scale_test_namespace }}
       --dry-run=client -oyaml
    | oc apply -f-

- name: Give the default SA the Pod listing privilege
  command:
    oc adm policy add-role-to-user
       pod-reader
       system:serviceaccount:{{ notebooks_locust_scale_test_namespace }}:default
       --role-namespace {{ notebooks_locust_scale_test_namespace }}
       -n {{ notebooks_locust_scale_test_namespace }}

- name: Name the namespace privileged
  command:
    oc adm policy add-scc-to-user privileged
       -z default
       -n {{ notebooks_locust_scale_test_namespace }}

# ---

- name: Cleanup the Prometheus databases of the sutest cluster
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  block:
  - name: Cleanup the RHODS Prometheus database of the sutest cluster
    include_role:
      name: cluster_prometheus_db
    vars:
      cluster_prometheus_db_mode: reset
      cluster_prometheus_db_label: deployment=prometheus
      cluster_prometheus_db_namespace: redhat-ods-monitoring
    when: capture_prom_db | bool

  - name: Cleanup the Prometheus database of the sutest cluster
    include_role:
      name: cluster_prometheus_db
    vars:
      cluster_prometheus_db_mode: reset
    when: capture_prom_db | bool

- name: Cleanup the Prometheus database of the driver cluster
  include_role:
    name: cluster_prometheus_db
  vars:
    cluster_prometheus_db_mode: reset
  when: capture_prom_db | bool

- name: Empty the Minio S3 bucket
  shell: |
    oc -c mc -n {{ notebooks_locust_scale_test_minio_namespace }} rsh $(oc get pod -lapp=minio -n {{ notebooks_locust_scale_test_minio_namespace }} -oname) \
       mc --config-dir /tmp rm minio/{{ notebooks_locust_scale_test_minio_bucket_name }}/ --recursive --force --quiet >/dev/null;
    oc -c mc -n {{ notebooks_locust_scale_test_minio_namespace }} rsh $(oc get pod -lapp=minio -n {{ notebooks_locust_scale_test_minio_namespace }} -oname) \
       rm -rf /artifacts/to_export  > /dev/null
    oc -c mc -n {{ notebooks_locust_scale_test_minio_namespace }} rsh $(oc get pod -lapp=minio -n {{ notebooks_locust_scale_test_minio_namespace }} -oname) \
       mc --config-dir /tmp cp /etc/os-release minio/{{ notebooks_locust_scale_test_minio_bucket_name }}; # without it, cp may fail if the bucket is empty
  failed_when: false

# ---

- name: Create the RHODS test job
  command:
    oc create
       -f "{{ artifact_extra_logs_dir }}/src/000_notebooks_locust_scale_test.yaml"
       -n {{ notebooks_locust_scale_test_namespace }}

- name: Wait for the RHODS tester job to start
  shell:
    oc get jobs/{{ tester_job_name }}
           -ojsonpath={.status.startTime}
           -n {{ notebooks_locust_scale_test_namespace }}
  register: wait_rhods_test_job_start
  retries: 12
  delay: 5
  until: wait_rhods_test_job_start.stdout

- name: Wait for the RHODS tester job to terminate
  command:
    oc get jobs/{{ tester_job_name }}
           -ojsonpath={.status.active}
           -n {{ notebooks_locust_scale_test_namespace }}
  register: wait_rhods_test_job
  retries: 60
  delay: 40
  until: not wait_rhods_test_job.stdout
  failed_when: false

# ---

- name: Capture the sutest cluster artifacts
  include_tasks: artifacts_sutest.yml

- name: Cleanup the notebooks Pods and PVCs
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  shell:
    set -o pipefail;
    oc get notebooks -oname -n {{ rhods_notebook_namespace }} |
      (grep "{{ notebooks_locust_scale_test_username_prefix }}" || true) |
       xargs --no-run-if-empty
          oc delete -n {{ rhods_notebook_namespace }}
  ignore_errors: true

- name: Cleanup the notebooks Pods and PVCs
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  shell:
    set -o pipefail;
    oc get pods,pvc -oname -n {{ rhods_notebook_namespace }} |
       (grep "{{ notebooks_locust_scale_test_username_prefix }}" || true) |
       xargs --no-run-if-empty
         oc delete -n {{ rhods_notebook_namespace }}
  ignore_errors: true

- name: Capture the driver cluster artifacts
  include_tasks: artifacts_driver.yml

- name: Show the artifacts directory
  debug: msg="The test artifacts have been stored in {{ artifact_extra_logs_dir }}"

- name: Generate MatrixBenchmark settings file
  shell: |
    cat <<EOF > "{{ artifact_extra_logs_dir }}/settings"
    date=$(date +%Y-%m-%d_%H:%M:%S)
    user_count={{ notebooks_locust_scale_test_user_count }}
    EOF
  ignore_errors: true

- name: Generate MatrixBenchmark exit code file
  shell:
    (test -z "$(oc get jobs/{{ tester_job_name }} -ojsonpath={.status.failed} -n {{ notebooks_locust_scale_test_namespace }})" && echo 0 || echo 1) > "{{ artifact_extra_logs_dir }}/exit_code"
  ignore_errors: true

- name: Test if the RHODS test job crashed
  command:
    oc get jobs/{{ tester_job_name }} -ojsonpath={.status.failed} -n {{ notebooks_locust_scale_test_namespace }}
  register: check_rhods_test_job
  failed_when: check_rhods_test_job.stdout | length > 0
